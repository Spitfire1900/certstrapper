/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.gottfriedstudios.certstrapper

import static com.gottfriedstudios.certstrapper.SupportMethods.indexesOfCRLFs

import spock.lang.Specification

class CertStrapperTest extends Specification {
	// Spock how-to: https://www.youtube.com/watch?v=GYszXrJtxKA

	static def certStrapperBundlePath = new File("${CertStrapper.DATA_HOME}/ca-bundle.crt")

	def setupSpec() {
		if (certStrapperBundlePath.exists()) {
			certStrapperBundlePath.delete()
		}
	}

	def 'Running the installer prints the path to the CA Bundle'() {
		when: 'capturing stdout'
		def buffer = new ByteArrayOutputStream()
		System.out = new PrintStream(buffer)

		and: 'running the application'
		CertStrapper.main()
		def stdout = buffer.toString().trim()

		then: 'the ca bundle is printed to console'
		certStrapperBundlePath.toString() == stdout
	}

	def 'Installer supports groovy closure'() {
		when: 'running the installer via Closure call'
		def installer = new CABundleInstaller()
		def instance = installer { CABundleInstaller it -> it }

		then: 'an instance of the installaer should be returned'
		installer instanceof CABundleInstaller
	}

	def 'Running the installer copies the CA bundle'() {
		given: 'an installer instence'
		def gitRetriever = new CABundleInstaller()

		when: 'the installer is ran'
		gitRetriever()

		then: 'verify ca bundle exists with content'
		certStrapperBundlePath.exists()
		certStrapperBundlePath.size() > 0

		then: 'verify LF line endings'
		indexesOfCRLFs(certStrapperBundlePath).size() == 0

		where: 'the ca bundle was, prior to running the installer'
		condition | _
		"absent"  | _
		"present" | _
	}

	def 'Print git lookup locations for when no git folder is found'() {
		given: 'no git install is found'
		def gitRetriever = new CABundleInstaller()
		def foundGit = gitRetriever.gitPath
		gitRetriever.gitPaths = gitRetriever.gitPaths.findAll { it != foundGit }

		when: 'the installer is ran'
		gitRetriever()

		then: 'verify a RuntimeException is thrown'
		RuntimeException exp = thrown()

		and: "the exception's message contains paths that the installer searched"
		exp.message.contains gitRetriever.gitPaths.toString()
	}

	def 'Print useful error message when found git does not include a cert bundle'() {
		given: 'an absent certs file even though a Git instance was found'
		def gitRetriever = Spy(CABundleInstaller)
		def gitCertsFile = new File('C:/I_DO_NOT_EXIST')
		gitRetriever.gitCertsFile >> gitCertsFile

		when: 'the installer is ran'
		gitRetriever()

		then: 'verify a RuntimeException is thrown'
		RuntimeException exp = thrown()

		and: "the path that was searched is in the exception message"
		exp.message == "The path '${gitCertsFile}' does not exist or is not a file"
	}
}
